detrend<-random1-productionts_dec_add$trend
ts.plot(detrend)
acf(detrend, na.action = na.pass,lag=48)
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production))
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts)
acf(productionts,lag=48)
productionts_dec_mul<-decompose(productionts,type="multiplicative")
plot(productionts_dec_mul)
unt_test1<-ur.kpss(productionts_dec_mul$random)
unt_test1
productionts_dec_add<-decompose(productionts,type="additive")
plot(productionts_dec_add)
unt_test2<-ur.kpss(productionts_dec_add$random)
unt_test2
random1<-productionts_dec_add$random
ts.plot(random1,main="Hourly production with random component")
acf(random1, na.action = na.pass,lag=48)
detrend<-random1-productionts_dec_add$trend
ts.plot(detrend)
acf(detrend, na.action = na.pass,lag=48)
random1<-productionts_dec_add$random
ts.plot(random1,main="Hourly production with random component")
acf(random1, na.action = na.pass,lag=48)
detrend<-random1-productionts_dec_add$trend
ts.plot(detrend,main="Hourly production without trend component")
acf(detrend, na.action = na.pass,lag=48)
plot(production)
accu<-function(actual, forecast){
n = length(actual)
error = actual - forecast
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual)) / n
RMSE = sqrt(sum(error^2) / n)
MAD = sum(abs(error)) / n
WMAPE = MAD / mean
l = data.frame(n, mean, sd, FBias, MAPE, RMSE, MAD, WMAPE)
return(l)
}
test_start_a<-as.Date('2020-12-01')
results_a<- c()
for(i in 0:61){
current_test_date<-test_start_a+i
train_data_a<-production[Date<current_test_date]
test_data_a<-production[Date==current_test_date]
productionts<-ts(train_data_a[Hour %between% c(8,17)]$Production,freq=70)
productionts_dec_add<-decompose(productionts,type="additive")
random1<-productionts_dec_add$random
model_a<-auto.arima(random1,seasonal = F,trace = F)
last_trend_value <-tail(productionts_dec_add$trend[!is.na(productionts_dec_add$trend)],n=1)
seasonal_a<-productionts_dec_add$seasonal[(61 + 10*i):(70+10*i)]
forecasted <- forecast(model_a,h=20)$mean
forecasted <- forecasted[11:20]
model_a_forecast=forecasted+last_trend_value+seasonal_a
test_data_a[Hour %in% c(0:7),forecasted_a:= 0]
test_data_a[Hour %in% c(8:17),forecasted_a:=model_a_forecast]
test_data_a[Hour %in% c(18:23),forecasted_a:= 0]
results_a <- c(results_a,test_data_a$forecasted_a)
test_data_a[,accu(Production,forecasted_a)]
}
accu(production[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],results_a)
plot(production)
ggplot() +
geom_line(data=tail(production,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)',ylab='Daily consumption', title='Forcested and actual values of daily consumption')+
ylab("daily consumption")
ggplot() +
geom_line(data=tail(production,1488),aes(x=Date,y=model_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)',ylab='Daily consumption', title='Forcested and actual values of daily consumption')+
ylab("daily consumption")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)',ylab='Daily consumption', title='Forcested and actual values of daily consumption')+
ylab("daily consumption")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="red")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="blue")) +
labs(xlab='Date(days)',ylab='Daily consumption', title='Forcested and actual values of daily consumption')+
ylab("daily consumption")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=forecasted_b,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
test_start_b<-as.Date('2020-12-01')
resultsb<- c()
for(i in 0:61){
current_test_date<-test_start_b+i
train_data_b<-production1[Date<current_test_date]
test_data_b<-production1[Date==current_test_date]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,train_data_b)
test_data_b[,forecastedb:=predict(modelb,test_data_b)]
test_data_b[Hour %in% c(0:7),forecastedb:= 0]
test_data_b[Hour %in% c(18:23),forecastedb:= 0]
resultsb <- c(resultsb,test_data_b$forecastedb)
test_data_b[,accu(Production,forecastedb)]
}
accu(production1[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],resultsb)
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=forecasted_b,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=forecastedb,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=test_data_b$forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=test_data_b$forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=test_data_b$forecastedb,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=test_data_b$forecastedb,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=forecastedb,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=modelb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=modelb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=forecastedb,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=Production,color="forecast")) +
geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=Production,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(resultsb,1488),aes(x=Date,y=Production,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_b,1488),aes(x=Date,y=resultsb,color="forecast")) +
#geom_line(data=tail(production1,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=model_a_forecast,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
head(test_data_a)
head(test_data_a,123)
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=forecasted_a,color="forecast")) +
# geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
production1[,trend:=1:.N]
production1[,lag1:=shift(Production,n = 1)]
production1[,production_hours:=0]
production1[Hour %between% c(7,17) ,production_hours:=1]
production1[,DSWRF_37.75_34.25_hours:=0]
production1[Hour %between% c(8,21) ,DSWRF_37.75_34.25_hours:=1]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,production1)
summary(modelb)
plot(modelb$residuals,main="Hourly residuals")
acf(modelb$residuals)
ggplot() +
geom_line(data=tail(test_data_a,1488),aes(x=Date,y=Production,color="forecast")) +
geom_line(data=tail(production,1488),aes(x=Date,y=Production,color="actual")) +
labs(xlab='Date(days)', title='Forcested and actual values of daily consumption')+
ylab("Production")
library(data.table)
library(lubridate)
library(zoo)
library(forecast)
library(mgcv)
library(urca)
library(ggplot2)
library(gratia)
production<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production))
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts)
acf(productionts,lag=48)
productionts_dec_mul<-decompose(productionts,type="multiplicative")
plot(productionts_dec_mul)
unt_test1<-ur.kpss(productionts_dec_mul$random)
unt_test1
productionts_dec_add<-decompose(productionts,type="additive")
plot(productionts_dec_add)
unt_test2<-ur.kpss(productionts_dec_add$random)
unt_test2
random1<-productionts_dec_add$random
ts.plot(random1,main="Hourly production with random component")
acf(random1, na.action = na.pass,lag=48)
detrend<-random1-productionts_dec_add$trend
ts.plot(detrend,main="Hourly production without trend component")
acf(detrend, na.action = na.pass,lag=48)
accu<-function(actual, forecast){
n = length(actual)
error = actual - forecast
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual)) / n
RMSE = sqrt(sum(error^2) / n)
MAD = sum(abs(error)) / n
WMAPE = MAD / mean
l = data.frame(n, mean, sd, FBias, MAPE, RMSE, MAD, WMAPE)
return(l)
}
test_start_a<-as.Date('2020-12-01')
results_a<- c()
for(i in 0:61){
current_test_date<-test_start_a+i
train_data_a<-production[Date<current_test_date]
test_data_a<-production[Date==current_test_date]
productionts<-ts(train_data_a[Hour %between% c(8,17)]$Production,freq=70)
productionts_dec_add<-decompose(productionts,type="additive")
random1<-productionts_dec_add$random
model_a<-auto.arima(random1,seasonal = F,trace = F)
last_trend_value <-tail(productionts_dec_add$trend[!is.na(productionts_dec_add$trend)],n=1)
seasonal_a<-productionts_dec_add$seasonal[(61 + 10*i):(70+10*i)]
forecasted <- forecast(model_a,h=20)$mean
forecasted <- forecasted[11:20]
model_a_forecast=forecasted+last_trend_value+seasonal_a
test_data_a[Hour %in% c(0:7),forecasted_a:= 0]
test_data_a[Hour %in% c(8:17),forecasted_a:=model_a_forecast]
test_data_a[Hour %in% c(18:23),forecasted_a:= 0]
results_a <- c(results_a,test_data_a$forecasted_a)
test_data_a[,accu(Production,forecasted_a)]
}
accu(production[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],results_a)
head(test_data_a,123)
production1<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
production1[,trend:=1:.N]
production1[,lag1:=shift(Production,n = 1)]
production1[,production_hours:=0]
production1[Hour %between% c(7,17) ,production_hours:=1]
production1[,DSWRF_37.75_34.25_hours:=0]
production1[Hour %between% c(8,21) ,DSWRF_37.75_34.25_hours:=1]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,production1)
summary(modelb)
plot(modelb$residuals,main="Hourly residuals")
acf(modelb$residuals)
test_start_b<-as.Date('2020-12-01')
resultsb<- c()
for(i in 0:61){
current_test_date<-test_start_b+i
train_data_b<-production1[Date<current_test_date]
test_data_b<-production1[Date==current_test_date]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,train_data_b)
test_data_b[,forecastedb:=predict(modelb,test_data_b)]
test_data_b[Hour %in% c(0:7),forecastedb:= 0]
test_data_b[Hour %in% c(18:23),forecastedb:= 0]
resultsb <- c(resultsb,test_data_b$forecastedb)
test_data_b[,accu(Production,forecastedb)]
}
accu(production1[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],resultsb)
library(data.table)
library(lubridate)
library(zoo)
library(forecast)
library(mgcv)
library(urca)
library(ggplot2)
library(gratia)
production<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production))
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts)
acf(productionts,lag=48)
productionts_dec_mul<-decompose(productionts,type="multiplicative")
plot(productionts_dec_mul)
unt_test1<-ur.kpss(productionts_dec_mul$random)
unt_test1
productionts_dec_add<-decompose(productionts,type="additive")
plot(productionts_dec_add)
unt_test2<-ur.kpss(productionts_dec_add$random)
unt_test2
random1<-productionts_dec_add$random
ts.plot(random1,main="Hourly production with random component")
acf(random1, na.action = na.pass,lag=48)
detrend<-random1-productionts_dec_add$trend
ts.plot(detrend,main="Hourly production without trend component")
acf(detrend, na.action = na.pass,lag=48)
accu<-function(actual, forecast){
n = length(actual)
error = actual - forecast
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual)) / n
RMSE = sqrt(sum(error^2) / n)
MAD = sum(abs(error)) / n
WMAPE = MAD / mean
l = data.frame(n, mean, sd, FBias, MAPE, RMSE, MAD, WMAPE)
return(l)
}
test_start_a<-as.Date('2020-12-01')
results_a<- c()
for(i in 0:61){
current_test_date<-test_start_a+i
train_data_a<-production[Date<current_test_date]
test_data_a<-production[Date==current_test_date]
productionts<-ts(train_data_a[Hour %between% c(8,17)]$Production,freq=70)
productionts_dec_add<-decompose(productionts,type="additive")
random1<-productionts_dec_add$random
model_a<-auto.arima(random1,seasonal = F,trace = F)
last_trend_value <-tail(productionts_dec_add$trend[!is.na(productionts_dec_add$trend)],n=1)
seasonal_a<-productionts_dec_add$seasonal[(61 + 10*i):(70+10*i)]
forecasted <- forecast(model_a,h=20)$mean
forecasted <- forecasted[11:20]
model_a_forecast=forecasted+last_trend_value+seasonal_a
test_data_a[Hour %in% c(0:7),forecasted_a:= 0]
test_data_a[Hour %in% c(8:17),forecasted_a:=model_a_forecast]
test_data_a[Hour %in% c(18:23),forecasted_a:= 0]
results_a <- c(results_a,test_data_a$forecasted_a)
test_data_a[,accu(Production,forecasted_a)]
}
accu(production[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],results_a)
production1<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
production1[,trend:=1:.N]
production1[,lag1:=shift(Production,n = 1)]
production1[,production_hours:=0]
production1[Hour %between% c(7,17) ,production_hours:=1]
production1[,DSWRF_37.75_34.25_hours:=0]
production1[Hour %between% c(8,21) ,DSWRF_37.75_34.25_hours:=1]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,production1)
summary(modelb)
plot(modelb$residuals,main="Hourly residuals")
acf(modelb$residuals)
test_start_b<-as.Date('2020-12-01')
resultsb<- c()
for(i in 0:61){
current_test_date<-test_start_b+i
train_data_b<-production1[Date<current_test_date]
test_data_b<-production1[Date==current_test_date]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,train_data_b)
test_data_b[,forecastedb:=predict(modelb,test_data_b)]
test_data_b[Hour %in% c(0:7),forecastedb:= 0]
test_data_b[Hour %in% c(18:23),forecastedb:= 0]
resultsb <- c(resultsb,test_data_b$forecastedb)
test_data_b[,accu(Production,forecastedb)]
}
accu(production1[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],resultsb)
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production),main="Hourly production values")
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts,main="Hourly production values")
acf(productionts,lag=48)
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production))+labs(title="Hourly production values")
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts,main="Hourly production values")
acf(productionts,lag=48)
library(data.table)
library(lubridate)
library(zoo)
library(forecast)
library(mgcv)
library(urca)
library(ggplot2)
library(gratia)
production<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
ggplot(production,aes(x=Date))+ geom_line(aes(y=Production))+labs(title="Hourly production values")
is.ts(production)
productionts<-ts(production$Production,freq=24)
is.ts(productionts)
ts.plot(productionts,main="Hourly production values")
acf(productionts,lag=48)
productionts_dec_mul<-decompose(productionts,type="multiplicative")
plot(productionts_dec_mul)
unt_test1<-ur.kpss(productionts_dec_mul$random)
unt_test1
productionts_dec_add<-decompose(productionts,type="additive")
plot(productionts_dec_add)
unt_test2<-ur.kpss(productionts_dec_add$random)
unt_test2
random1<-productionts_dec_add$random
ts.plot(random1,main="Hourly production with random component")
acf(random1, na.action = na.pass,lag=48)
detrend<-random1-productionts_dec_add$trend
ts.plot(detrend,main="Hourly production without trend component")
acf(detrend, na.action = na.pass,lag=48)
accu<-function(actual, forecast){
n = length(actual)
error = actual - forecast
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual)) / n
RMSE = sqrt(sum(error^2) / n)
MAD = sum(abs(error)) / n
WMAPE = MAD / mean
l = data.frame(n, mean, sd, FBias, MAPE, RMSE, MAD, WMAPE)
return(l)
}
test_start_a<-as.Date('2020-12-01')
results_a<- c()
for(i in 0:61){
current_test_date<-test_start_a+i
train_data_a<-production[Date<current_test_date]
test_data_a<-production[Date==current_test_date]
productionts<-ts(train_data_a[Hour %between% c(8,17)]$Production,freq=70)
productionts_dec_add<-decompose(productionts,type="additive")
random1<-productionts_dec_add$random
model_a<-auto.arima(random1,seasonal = F,trace = F)
last_trend_value <-tail(productionts_dec_add$trend[!is.na(productionts_dec_add$trend)],n=1)
seasonal_a<-productionts_dec_add$seasonal[(61 + 10*i):(70+10*i)]
forecasted <- forecast(model_a,h=20)$mean
forecasted <- forecasted[11:20]
model_a_forecast=forecasted+last_trend_value+seasonal_a
test_data_a[Hour %in% c(0:7),forecasted_a:= 0]
test_data_a[Hour %in% c(8:17),forecasted_a:=model_a_forecast]
test_data_a[Hour %in% c(18:23),forecasted_a:= 0]
results_a <- c(results_a,test_data_a$forecasted_a)
test_data_a[,accu(Production,forecasted_a)]
}
accu(production[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],results_a)
production1<-fread("D:/Boğaziçi/İe360/final/production_data_with_weather.csv")
production1[,trend:=1:.N]
production1[,lag1:=shift(Production,n = 1)]
production1[,production_hours:=0]
production1[Hour %between% c(7,17) ,production_hours:=1]
production1[,DSWRF_37.75_34.25_hours:=0]
production1[Hour %between% c(8,21) ,DSWRF_37.75_34.25_hours:=1]
modelb <- lm(Production~lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,production1)
summary(modelb)
plot(modelb$residuals,main="Hourly residuals")
acf(modelb$residuals)
test_start_b<-as.Date('2020-12-01')
resultsb<- c()
for(i in 0:61){
current_test_date<-test_start_b+i
train_data_b<-production1[Date<current_test_date]
test_data_b<-production1[Date==current_test_date]
modelb <- lm(Production~-1+lag1+production_hours+DSWRF_37.75_34.25_hours+TEMP_37.75_34.25+TEMP_37.75_34.5+TEMP_38_34.25+TEMP_38_34.5+CLOUD_LOW_LAYER_38_34.25+CLOUD_LOW_LAYER_38_34.5,train_data_b)
test_data_b[,forecastedb:=predict(modelb,test_data_b)]
test_data_b[Hour %in% c(0:7),forecastedb:= 0]
test_data_b[Hour %in% c(18:23),forecastedb:= 0]
resultsb <- c(resultsb,test_data_b$forecastedb)
test_data_b[,accu(Production,forecastedb)]
}
accu(production1[Date %between% as.Date(c("2020-12-01","2021-01-31")),Production],resultsb)
